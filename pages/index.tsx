import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { UniversalProvider } from "@walletconnect/universal-provider";
import { useState, useSyncExternalStore } from 'react';
import { WalletConnectModal } from '@walletconnect/modal';

if(!process.env.NEXT_PUBLIC_PROJECT_ID) throw Error("Project ID missing")

const projectId = process.env.NEXT_PUBLIC_PROJECT_ID as string

const modal = new WalletConnectModal({
  projectId,
})

const universal = () => {
  let provider: Awaited<ReturnType<typeof UniversalProvider.init>>;
  const init = async(callback: ()=>void)=>{
    provider = await UniversalProvider.init({
      projectId: projectId,
      metadata: {
        name: "React App",
        description: "React App for WalletConnect",
        url: "https://walletconnect.com/",
        icons: ["https://avatars.githubusercontent.com/u/37784886"],
      }
    });
    callback()
  }
  
  let subscribe = (callback: ()=> void)=>{
    init(callback)
    return ()=>{}
  }

  let getProvider = ()=> provider

  return {
    subscribe,
    getProvider
  }
}

const store = universal()

export default function Home() {

  const provider = useSyncExternalStore(store.subscribe, store.getProvider,()=>null)
  const [isConnecting, setIsConnecting] = useState<boolean>(false)

  async function handleConnect(){
    if(!provider) return
    provider.on("display_uri", (uri: string) => {
      modal.openModal({
        uri
      })
    });
    provider.on("session_delete", ({ id, topic }: any) => {
      console.log("session_delete", id, topic);
    });
    modal.subscribeModal((e)=> {e.open === false && setIsConnecting(false)})
    setIsConnecting(true)
    await provider.connect({
      namespaces: {
        eip155: {
          methods: [
            "eth_sendTransaction",
            "personal_sign",
          ],
          chains: ["eip155:1"],
          events: ["chainChanged", "accountsChanged"],
          rpcMap: {
            1:
            `https://rpc.walletconnect.com?chainId=eip155:1&projectId=${projectId}`,
          },
        }
      },
      optionalNamespaces:{
        eip155: {
          methods: [
            "eth_sendTransaction",
            "personal_sign",
          ],
          chains: ["eip155:56", "eip155:137"],
          events: ["chainChanged", "accountsChanged"],
          rpcMap: {
            1:
            `https://rpc.walletconnect.com?chainId=eip155:1&projectId=${projectId}`,
          },
        }
      }
    }).catch(console.error)
    modal.closeModal()
  }

  function handleDiconnect(){provider && provider.disconnect()}

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <button onClick={handleConnect} >Connect</button>
        <button onClick={handleDiconnect} >Disconnect</button>
        {isConnecting && "Connecting..."}
      </main>
    </>
  )
}
